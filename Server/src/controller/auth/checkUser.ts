import {
  Request,
  Response,
  bcrypt,
  jwt,
  JwtPayload,
  UserSchema,
  encryptData,
  JWT_SECRET,
} from "../../utils/constants";
import LogoutLogSchema from "../../models/logoutLogSchema";
import { ObjectId } from "mongodb";
const User = UserSchema;

export const checkUser = async (req: Request, res: Response) => {
  const { email, password, role } = req.body;

  if (!email || !password || !role) {
    return res.error(400, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô");
  }

  if (!email.includes("@")) {
    return res.error(400, "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö email ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
  }

  const encryptedEmail = encryptData(email);

  try {
    const user = await User.findOne({ email: encryptedEmail });

    if (!user) {
      return res.error(404, "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ");
    }

    if (user.role !== role) {
      return res.error(403, "‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
    }

    if (user.status === "inactive") {
      return res.error(403, "‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•");
    }

    if (user.role === "admin" && !user.confirmedBy) {
      return res.error(403, "‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠", null, "info");
    }

    if (user.status === "deleted") {
      return res.error(404, "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ");
    }

    const isPasswordValid = await bcrypt.compare(password, user.password);

    if (!isPasswordValid) {
      return res.error(400, "‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
    }

    if (user.policyAccepted === null) {
      return res.error(
        410,
        "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö",
        { policy: "‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ..." },
        "/auth/accept_policy",
        "info"
      );
    }

    const userID: { id: string; role: string } = {
      id: (user._id as ObjectId).toString(),
      role: user.role,
    };

    (req.session as any).userID = userID;

    return res.success(
      "‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á OTP",
      null,
      "/auth/create_otp"
    );
  } catch (error) {
    return res.error(
      500,
      "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö",
      (error as Error).message
    );
  }
};

export const logoutUser = async (req: Request, res: Response) => {
  try {
    const token = (req.session as any).token;

    if (!token || typeof token !== "string") {
      return res.error(401, "‡πÑ‡∏°‡πà‡∏û‡∏ö token ‡∏´‡∏£‡∏∑‡∏≠ token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
    }

    let decodedToken: JwtPayload | null = null;
    let reason = "‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö";

    try {
      decodedToken = jwt.verify(token, JWT_SECRET) as JwtPayload;
      console.log("‚úÖ Token Verified:", decodedToken);
    } catch (error) {
      reason = "token ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏";
      decodedToken = jwt.decode(token) as JwtPayload;
      console.log("‚ö†Ô∏è Token Expired:", decodedToken);
    }

    if (!decodedToken || !decodedToken.id || !decodedToken.role) {
      return res.error(401, "Token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
    }

    const { id: userId, role, email } = decodedToken;

    const userIp = req.ip || req.headers["x-forwarded-for"] || "Unknown IP";
    console.log("üîπ User Logout:", { userId, role, reason, ip: userIp });

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Log ‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
    await LogoutLogSchema.create({
      userId,
      role,
      email,
      reason,
      ip: userIp,
      logoutAt: new Date().toISOString(), // ‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö ISO Date
    });

    // ‡πÅ‡∏õ‡∏•‡∏á `req.session.destroy()` ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô Promise-based function
    const destroySession = () =>
      new Promise<void>((resolve, reject) => {
        req.session.destroy((err) => {
          if (err) reject(err);
          else resolve();
        });
      });

    await destroySession();

    return res.success("Logout ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
  } catch (error) {
    console.error("‚ùå Logout Error:", error);
    return res.error(
      500,
      "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö",
      (error as Error).message
    );
  }
};
